window.generateWordDoc = function(documentText, formData) {
  try {
    // Parse and convert the side-by-side comparison table
    let processedText = documentText;
    
    // Find the comparison table section
    const tableStart = documentText.indexOf('SIDE-BY-SIDE COMPARISON');
    const tableEnd = documentText.indexOf('===================================================================================', tableStart + 50);
    
    if (tableStart !== -1 && tableEnd !== -1) {
      const beforeTable = documentText.substring(0, tableStart);
      const afterTable = documentText.substring(tableEnd + 83); // Length of the equals line
      const tableSection = documentText.substring(tableStart, tableEnd);
      
      // Extract table rows
      const rows = tableSection.split('\n').filter(line => line.includes('|') && !line.includes('SIDE-BY-SIDE'));
      
      // Build HTML table
      let htmlTable = `
<table border="1" cellpadding="8" cellspacing="0" style="width: 100%; border-collapse: collapse; margin: 20px 0;">
  <thead>
    <tr style="background-color: #f0f0f0;">
      <th style="text-align: left; font-weight: bold;">Category</th>
      <th style="text-align: center; font-weight: bold;">W-2 Employee</th>
      <th style="text-align: center; font-weight: bold;">1099 Contractor</th>
    </tr>
  </thead>
  <tbody>`;
      
      rows.forEach(row => {
        if (row.trim()) {
          const parts = row.split('|').map(part => part.trim()).filter(part => part);
          if (parts.length === 3) {
            htmlTable += `
    <tr>
      <td style="font-weight: bold;">${parts[0]}</td>
      <td style="text-align: center;">${parts[1]}</td>
      <td style="text-align: center;">${parts[2]}</td>
    </tr>`;
          }
        }
      });
      
      htmlTable += `
  </tbody>
</table>`;
      
      // Replace the ASCII table with HTML table
      processedText = beforeTable + 'SIDE-BY-SIDE COMPARISON\n\n' + htmlTable + '\n\n' + afterTable;
    }
    
    // Convert remaining text to HTML paragraphs, but preserve the table
    const parts = processedText.split(/(<table[\s\S]*?<\/table>)/);
    let htmlContent = `<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>1099 vs W-2 Tax Comparison</title>
<style>
body { 
  font-family: Calibri, Arial, sans-serif; 
  font-size: 11pt; 
  margin: 0.5in; 
  line-height: 1.4;
}
h1 { 
  text-align: center; 
  font-size: 16pt; 
  margin-bottom: 20pt;
}
table {
  width: 100%;
  border-collapse: collapse;
  margin: 20px 0;
}
th, td {
  border: 1px solid #000;
  padding: 8px;
  text-align: left;
}
th {
  background-color: #f0f0f0;
  font-weight: bold;
}
.section {
  margin-bottom: 15pt;
}
.section-title {
  font-weight: bold;
  margin-bottom: 5pt;
}
</style>
</head>
<body>
<h1>1099 vs W-2 Tax Comparison Analysis</h1>`;

    parts.forEach(part => {
      if (part.startsWith('<table')) {
        htmlContent += part;
      } else {
        // Convert text sections to HTML paragraphs
        const lines = part.split('\n');
        let currentSection = '';
        
        lines.forEach(line => {
          const trimmedLine = line.trim();
          if (trimmedLine) {
            if (trimmedLine.includes(':') && !trimmedLine.startsWith('â€¢') && !trimmedLine.startsWith('-')) {
              if (currentSection) {
                htmlContent += `<div class="section">${currentSection}</div>`;
                currentSection = '';
              }
              currentSection += `<div class="section-title">${trimmedLine}</div>`;
            } else {
              currentSection += `<p>${trimmedLine}</p>`;
            }
          } else {
            if (currentSection) {
              htmlContent += `<div class="section">${currentSection}</div>`;
              currentSection = '';
            }
          }
        });
        
        if (currentSection) {
          htmlContent += `<div class="section">${currentSection}</div>`;
        }
      }
    });

    htmlContent += `
<p style="margin-top: 30pt; font-style: italic; text-align: center;">
Generated by terms.law Tax Calculator on ${new Date().toLocaleDateString()}
</p>
</body>
</html>`;

    const blob = new Blob([htmlContent], { type: 'application/vnd.ms-word;charset=utf-8' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = '1099-vs-W2-Tax-Analysis.doc';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
  } catch (error) {
    console.error("Error:", error);
    alert("Error generating document. Please use the copy option instead.");
  }
};